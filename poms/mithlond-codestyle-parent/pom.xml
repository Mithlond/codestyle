<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- +=============================================== -->
    <!-- | Section 1:  Project information                -->
    <!-- +=============================================== -->
    <parent>
        <groupId>se.jguru.nazgul.core.poms.core-parent</groupId>
        <artifactId>nazgul-core-parent</artifactId>
        <version>1.8.0</version>
        <relativePath />
    </parent>

    <groupId>se.mithlond.codestyle.poms</groupId>
    <artifactId>mithlond-codestyle-parent</artifactId>
    <version>1.0.1-SNAPSHOT</version>
    <name>${project.artifactId}</name>
    <packaging>pom</packaging>
    <url>${site.top.url}/${path.in.reactor}</url>
    <description>Mithlond Codestyle: Artifact POM Parent.</description>

    <organization>
        <name>Mithlond</name>
        <url>http://www.mithlond.se</url>
    </organization>
    <inceptionYear>2015</inceptionYear>

    <developers>
        <developer>
            <id>lj</id>
            <name>Lennart JÃ¶relid</name>
            <email>lennart.jorelid@gmail.com</email>
            <roles>
                <role>Committer</role>
            </roles>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>jGuru Europe Corporate Source License, based on The Apache Software License, Version 2.0</name>
            <url>http://www.jguru.se/licenses/jguruCorporateSourceLicense-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <properties>
        <!--
            Define the name and type of this reactor
        -->
        <path.in.reactor>poms/mithlond-codestyle-parent</path.in.reactor>
        <reactor.name>mithlond-codestyle</reactor.name>
        <organisation.name>Mithlond</organisation.name>

        <!--
            Define URL prefixes used in the various URL settings of the POM.
        -->
        <organisation.url.prefix>https://github.com/${organisation.name}</organisation.url.prefix>
        <git.url.prefix>scm:git:ssh://git@github.com/${organisation.name}</git.url.prefix>
        <site.url.prefix>http://mithlond.github.io</site.url.prefix>
        <site.top.url>${site.url.prefix}/${organisation.name}/${reactor.name}/Documentation/${project.version}</site.top.url>

        <!--
            Define the URL prefixes for Site Deployment and DistributionManagement.
            These can be overridden in sub-reactors to tailor releases to other locations.
        -->
        <issue.mgmnt.url>${organisation.url.prefix}/${reactor.name}/issues</issue.mgmnt.url>
        <scm.connection.url>scm:git:${organisation.url.prefix}/${reactor.name}.git</scm.connection.url>
        <scm.devConnection.url>${git.url.prefix}/${reactor.name}.git</scm.devConnection.url>
        <distroManagement.url>${site.top.url}/${path.in.reactor}</distroManagement.url>
        <scm.url>${organisation.url.prefix}/${reactor.name}.git</scm.url>
        <site.staging.localDirectory>/tmp/${reactor.name}/${project.version}</site.staging.localDirectory>

        <!-- Version constants -->
        <jdk.version>1.8</jdk.version>
        <nazgul-core.version>1.8.0</nazgul-core.version>
        <logback.version>1.1.2</logback.version>
        <aspectj-maven-plugin.version>1.7</aspectj-maven-plugin.version>
        <aspectj.runtime.version>1.8.6</aspectj.runtime.version>
        <findbugs.plugin.version>3.0.0</findbugs.plugin.version>
        <pmd.plugin.version>3.3</pmd.plugin.version>

        <!-- Build time constants -->
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss.sssZ</maven.build.timestamp.format>
    </properties>

    <!-- +=============================================== -->
    <!-- | Section 2:  Dependency (management) settings   -->
    <!-- +=============================================== -->
    <dependencyManagement>
        <dependencies>
            <!-- Nazgul Core dependencies -->
            <dependency>
                <groupId>se.jguru.nazgul.core.algorithms.api</groupId>
                <artifactId>nazgul-core-algorithms-api</artifactId>
                <version>${nazgul-core.version}</version>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.core.algorithms.launcher.api</groupId>
                <artifactId>nazgul-core-launcher-api</artifactId>
                <version>${nazgul-core.version}</version>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.core.reflection.api</groupId>
                <artifactId>nazgul-core-reflection-api</artifactId>
                <version>${nazgul-core.version}</version>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.core.persistence.model</groupId>
                <artifactId>nazgul-core-persistence-model</artifactId>
                <version>${nazgul-core.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.openjpa</groupId>
                        <artifactId>openjpa</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.core.persistence.api</groupId>
                <artifactId>nazgul-core-persistence-api</artifactId>
                <version>${nazgul-core.version}</version>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.core.xmlbinding.spi.jaxb</groupId>
                <artifactId>nazgul-core-xmlbinding-spi-jaxb</artifactId>
                <version>${nazgul-core.version}</version>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.test.xmlbinding</groupId>
                <artifactId>nazgul-core-xmlbinding-test</artifactId>
                <version>${nazgul-core.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>se.jguru.nazgul.test.persistence</groupId>
                <artifactId>nazgul-core-persistence-test</artifactId>
                <version>${nazgul-core.version}</version>
                <scope>test</scope>
            </dependency>

            <!--
                Logback dependencies.
            -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!--
                Joda-Time
            -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>2.8</version>
            </dependency>

            <!--
                Db Drivers
            -->
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>9.3-1101-jdbc41</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.hsqldb</groupId>
                <artifactId>hsqldb</artifactId>
                <version>2.3.2</version>
                <scope>test</scope>
            </dependency>

            <!--
                AspectJ Weaver
            -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectj.runtime.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- +=============================================== -->
    <!-- | Section 3:  Build settings                     -->
    <!-- +=============================================== -->
    <build>
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
            <resource>
                <directory>${project.build.directory}/jaxb2/transformed</directory>
                <includes>
                    <include>**/*.xsd</include>
                </includes>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>

                <!--
                    Configures the release plugin version.
                    Also ensures that the default release profile is not used.
                    (The mithlond-release profile should be used instead).

                    Why:  Release artifacts
                    Used: Normal lifecycle, release goal
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.2</version>
                    <configuration>
                        <!--
                            Do not perform site deployment when releasing.
                         -->
                        <mavenExecutorId>forked-path</mavenExecutorId>
                        <goals>deploy</goals>
                        <useReleaseProfile>false</useReleaseProfile>
                        <arguments>-Pmithlond-release</arguments>
                    </configuration>
                </plugin>

                <!--
                    Configure Compiler plugin.

                    Why:  Ensures source and target Java versions, as well as source encoding (UTF-8).
                    Used: Standard lifecycle, mvn compile.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.3</version>
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                        <showWarnings>true</showWarnings>
                        <showDeprecation>true</showDeprecation>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>

                <!--
                    The license plugin is quite inflexible about the format for the injected/detected file header
                    in terms of license structure. Use it as intended, but provide a variable defining the license
                    specifics.

                    Why:  Ensures that all files contain a license header.
                    Used: Standard lifecycle, mvn package.
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>1.8</version>
                    <configuration>
                        <descriptionTemplate>/codestyle/license/${license.id}/licenseDescriptionTemplate.ftl
                        </descriptionTemplate>
                        <failOnMissingHeader>${breakOnFailure.license}</failOnMissingHeader>
                        <licenseName>${license.id}</licenseName>
                        <licenseResolver>${license.licenseResolver}</licenseResolver>
                        <canUpdateDescription>true</canUpdateDescription>
                        <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
                        <licenseFile>${project.build.directory}/LICENSE.TXT</licenseFile>
                        <detail>true</detail>
                        <roots>
                            <root>${project.basedir}/src/main</root>
                            <root>${project.basedir}/src/test</root>
                            <root>${project.basedir}/src/site</root>
                        </roots>
                        <excludes>
                            <exclude>*.png</exclude>
                            <exclude>*.js</exclude>
                            <exclude>*.json</exclude>
                            <exclude>**/*.json</exclude>
                            <exclude>*.min.js</exclude>
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <id>check-file-header</id>
                            <phase />
                            <goals>
                                <goal>check-file-header</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>add-license</id>
                            <phase />
                            <goals>
                                <goal>update-project-license</goal>
                            </goals>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>se.jguru.nazgul.tools.codestyle</groupId>
                            <artifactId>nazgul-codestyle</artifactId>
                            <version>${nazgul.tools.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!--
                    The assembly plugin is used to create a jar-with-dependencies for arbitrary projects.
                    The jar-with-dependencies is not automatically added as an artifact to the existing project.
                    If the jar-with-dependencies should be added, use the build-helper-maven-plugin.

                    Why:  Creates a jar-with-dependencies compound JAR.
                    Used: Standard lifecycle, mvn package.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.5.4</version>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                            <configuration>
                                <useJvmChmod>true</useJvmChmod>
                                <descriptorRefs>
                                    <descriptorRef>jar-with-dependencies</descriptorRef>
                                </descriptorRefs>
                                <archive>
                                    <manifest>
                                        <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                        <addClasspath>false</addClasspath>
                                    </manifest>
                                </archive>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    The assembly plugin is used to create a jar-with-dependencies for arbitrary projects.
                    The jar-with-dependencies is not automatically added as an artifact to the existing project.
                    If the jar-with-dependencies should be added, use the build-helper-maven-plugin.

                    Why:  Creates a jar-with-dependencies compound JAR.
                    Used: Standard lifecycle, mvn package.
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.9.1</version>
                    <executions>
                        <execution>
                            <id>attach-artifacts</id>
                            <phase />
                            <goals>
                                <goal>attach-artifact</goal>
                            </goals>
                            <configuration>
                                <artifacts>
                                    <artifact>
                                        <file>
                                            ${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar
                                        </file>
                                        <classifier>jar-with-dependencies</classifier>
                                        <type>jar</type>
                                    </artifact>
                                </artifacts>
                            </configuration>
                        </execution>
                        <execution>
                            <id>timestamp-property</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>timestamp-property</goal>
                            </goals>
                            <configuration>
                                <name>timestamp</name>
                                <pattern>${maven.build.timestamp.format}</pattern>
                                <locale>sv_SE</locale>
                                <timeZone>Europe/Stockholm</timeZone>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    Configures the Maven changes plugin to run only when executed from the project root directory.

                    Why:  Release artifacts
                    Used: Normal lifecycle, site goal
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-changes-plugin</artifactId>
                    <version>2.11</version>
                    <configuration>
                        <issueManagementSystems>
                            <issueManagementSystem>GitHub</issueManagementSystem>
                        </issueManagementSystems>
                        <runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
                    </configuration>
                </plugin>

                <!--
                    Configures the Maven changes plugin to publish the site to a well-defined directory
                    which includes its version.

                    Why:  Publish maven site documentation on GitHub Pages.
                    Used: Release lifecycle, site goal
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scm-publish-plugin</artifactId>
                    <version>1.1</version>
                    <configuration>
                        <pubScmUrl>${scm.devConnection.url}</pubScmUrl>
                        <scmBranch>gh-pages</scmBranch>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>2.3.1</version>
            </plugin>

            <!--
                Configures the site plugin. Its use is further documented in the site documentation itself.

                Why:  Make compile and publish the site documentation.
                Used: Site lifecycle, mvn site.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.4</version>
                <executions>
                    <execution>
                        <id>attach-descriptor</id>
                        <goals>
                            <goal>attach-descriptor</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <topSiteURL>${site.top.url}</topSiteURL>
                    <stagingSiteURL>${site.url.prefix}/${reactor.name}/${project.version}</stagingSiteURL>
                    <stagingDirectory>${site.staging.localDirectory}</stagingDirectory>
                    <generateSitemap>true</generateSitemap>
                    <inputEncoding>${project.build.sourceEncoding}</inputEncoding>
                    <outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-ssh</artifactId>
                        <version>2.7</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-file</artifactId>
                        <version>2.7</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-module-markdown</artifactId>
                        <version>1.6</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-module-xhtml</artifactId>
                        <version>1.6</version>
                    </dependency>
                </dependencies>
            </plugin>


            <!--
                The license plugin is quite inflexible about the format for the injected/detected file header
                in terms of license structure. Use it as intended, but provide a variable

                Why:  Ensures that all files contain a license header.
                Used: Standard lifecycle, mvn package.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>check-file-header</id>
                        <phase />
                        <goals>
                            <goal>check-file-header</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>add-license</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>update-project-license</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>se.jguru.nazgul.tools.codestyle</groupId>
                        <artifactId>nazgul-codestyle</artifactId>
                        <version>${nazgul.tools.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--
                Use the bundle plugin to create an OSGi-enabled Manifest.
            -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <extensions>true</extensions>
            </plugin>

            <!--
                Use the dependency plugin to copy the OpenJPA runtime
                to the target directory.
            -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.apache.openjpa</groupId>
                                    <artifactId>openjpa</artifactId>
                                    <version>${openjpa.version}</version>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>openjpa.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                Configure the Surefire plugin to run all JPA unit tests
                with the OpenJPA javaagent enabled
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <disableXmlReport>false</disableXmlReport>
                    <forkMode>pertest</forkMode>
                    <!-- argLine>-javaagent:${basedir}/target/openjpa.jar -Dfile.encoding=UTF-8</argLine -->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>1.6</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/jaxb2/transformed/generated-schema</outputDirectory>
                    <transformSchemas>
                        <!--
                            Each schema element defines:

                            a) A <<namespace uri>> for one of your namespaces.
                               This namespace uri must be unique within the schemas element.

                            b) A <<toPrefix>> that you want to use for the namespace.
                               Should not contain whitespace or exotic characters.
                               This yields a namespace definition on the form
                               <xs:schema ... xmlns:[toPrefix]="[uri]" ... />

                               (I.e: <xs:schema ... xmlns:some="http://some/namespace" xmlns:xs="http://www.w3.org/2001/XMLSchema"> )

                               ... and transforms relevant xml schema elements to use the provided namespace prefix:

                               <some:elementName ... />

                            c) The desired <<toFile>> name of the generated XML schema definition file,
                               excluding the ".xsd" suffix (which will be added automatically).
                        -->
                        <transformSchema>
                            <uri>http://www.mithlond.se/services/selectschool</uri>
                            <toPrefix>school</toPrefix>
                            <toFile>SelectSchool.xsd</toFile>
                        </transformSchema>
                        <transformSchema>
                            <uri>http://www.jguru.se/nazgul/core</uri>
                            <toPrefix>core</toPrefix>
                            <toFile>NazgulCore.xsd</toFile>
                        </transformSchema>
                        <transformSchema>
                            <uri>http://www.mithlond.se/dataexchange</uri>
                            <toPrefix>svex</toPrefix>
                            <toFile>dataexchange.xsd</toFile>
                        </transformSchema>
                    </transformSchemas>
                </configuration>
            </plugin>

            <!--
                Enforce not importing incorrect projects.
            -->
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <executions>
                    <execution>
                        <id>enforce-imports</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.0.4,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${jdk.version}</version>
                                </requireJavaVersion>
                                <requireUpperBoundDeps />

                                <!--
                                    Enforce the ProjectType structure, implying that all projects
                                    must comply with the project template definitions.
                                -->
                                <validateProjectTypes implementation="se.jguru.nazgul.tools.codestyle.enforcer.rules.ValidateProjectType" />

                                <!--
                                    Enforce the implementation rules for dependencies, to enforce that
                                    API, MODEL and SPI projects do not import projects of types
                                    APPLICATION, TEST, POC o IMPLEMENTATION.

                                    While the configuration below reflect the default settings, it is
                                    reproduced her to serve as an example of how to configure this enforcement rule
                                    in child reactors - where needs are likely different than here.
                                -->
                                <restrictImplDependencies implementation="se.jguru.nazgul.tools.codestyle.enforcer.rules.RestrictImplDependencies">
                                    <includedGroupIdPatterns>^se\\.mithlond\\..*</includedGroupIdPatterns>
                                    <excludedGroupIdPatterns>
                                        ^se\\.mithlond\\..*\\.generated\\..*,^se\\.mithlond\\.codestyle\\..*
                                    </excludedGroupIdPatterns>
                                </restrictImplDependencies>

                                <!--
                                    Enforce using correct packages for classes within a NSC project.
                                    The root package of any project should be identical to its groupId.
                                    Any package below the root package can safely be used - so ...

                                    if the groupId of a project is "com.acme.foobar",
                                    then all code within that project must reside within the "com.acme.foobar" package,
                                    or in any subpackage thereof.
                                -->
                                <correctPackaging implementation="se.jguru.nazgul.tools.codestyle.enforcer.rules.CorrectPackagingRule" />
                            </rules>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>se.jguru.nazgul.tools.codestyle</groupId>
                        <artifactId>nazgul-codestyle</artifactId>
                        <version>${nazgul.tools.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>timestamp-property</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>timestamp-property</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>${aspectj-maven-plugin.version}</version>
                <configuration>
                    <complianceLevel>${jdk.version}</complianceLevel>
                    <includes>
                        <include>**/*.java</include>
                        <include>**/*.aj</include>
                    </includes>
                    <aspectDirectory>src/main/aspect</aspectDirectory>
                    <testAspectDirectory>src/test/aspect</testAspectDirectory>
                    <!--
                       This option causes the JoinPoint.getStaticPart() to
                       sometimes return null - which crashes all Aspects relying
                       on JoinPoint static information.... such as the ValidationAspect.

                       Yes - it is a bug in AspectJ.
                       // Lennart, 2011-07-23
                    -->
                    <XaddSerialVersionUID>true</XaddSerialVersionUID>
                    <showWeaveInfo>true</showWeaveInfo>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>se.jguru.nazgul.tools.validation.aspect</groupId>
                            <artifactId>nazgul-tools-validation-aspect</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                </configuration>
                <executions>
                    <execution>
                        <id>compile_with_aspectj</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile_with_aspectj</id>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.runtime.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>se.jguru.nazgul.tools.validation.aspect</groupId>
                        <artifactId>nazgul-tools-validation-aspect</artifactId>
                        <version>${nazgul.tools.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
                <!-- reportSets>
                    <reportSet>
                        <reports>
                            <report>cim</report>
                            <report>cobertura</report>
                            <report>dependency-info</report>
                            <report>index</report>
                            <report>issue-tracking</report>
                            <report>mailing-list</report>
                            <report>project-team</report>
                            <report>scm</report>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets -->
            </plugin>

            <!--
                Generate a Surefire Report.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

    <!-- +=============================================== -->
    <!-- | Section 4:  External systems                   -->
    <!-- +=============================================== -->

    <!--
       Define connections for Maven's VCS integration.
    -->
    <scm>
        <connection>${scm.connection.url}</connection>
        <developerConnection>${scm.devConnection.url}</developerConnection>
        <url>${scm.url}</url>
        <tag>HEAD</tag>
    </scm>

    <ciManagement>
        <system>Travis</system>
        <url>https://travis-ci.org/Mithlond/${reactor.name}</url>
    </ciManagement>

    <!--
        Define the issue management system.
    -->
    <issueManagement>
        <system>github</system>
        <url>${issue.mgmnt.url}</url>
    </issueManagement>

    <!--
        Define repository settings for Maven's deploy and release plugins.
        Move parts to settings.xml, as per recommendation within Maven specs.
    -->
    <distributionManagement>
        <repository>
            <id>ossrh-staging</id>
            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
            <id>ossrh-snapshots</id>
            <url>http://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <site>
            <id>github</id>
            <url>${distroManagement.url}</url>
        </site>
    </distributionManagement>

    <!-- +=============================================== -->
    <!-- | Section 5:  Profiles                           -->
    <!-- +=============================================== -->
    <profiles>
        <profile>
            <id>wildfly8_jee7</id>
            <activation>
                <property>
                    <name>jee.container</name>
                    <value>wildfly8</value>
                </property>
            </activation>

            <properties>
                <!-- Persistence properties -->
                <datasource.prefix>java:jboss/</datasource.prefix>

                <!-- Version and import-scope properties -->
                <version.jboss.bom>8.0.0.Final</version.jboss.bom>
                <version.jboss.as>8.1.0.Final</version.jboss.as>
                <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
                <version.jboss.spec.javaee.7.0>1.0.0.Final</version.jboss.spec.javaee.7.0>

                <!-- Some dependent version definitions -->
                <version.org.hibernate3.commons.annotations>3.2.0.Final</version.org.hibernate3.commons.annotations>
                <version.org.hibernate>3.6.8.Final</version.org.hibernate>
                <version.org.hibernate.em>3.6.8.Final</version.org.hibernate.em>
                <version.org.hibernate.infinispan>3.6.8.Final</version.org.hibernate.infinispan>
                <version.org.hibernate.validator>4.3.0.Final</version.org.hibernate.validator>
            </properties>

            <dependencyManagement>
                <dependencies>
                    <!--
                        JBoss distributes a complete set of Java EE 7 APIs including a Bill of Materials (BOM).
                        A BOM specifies the versions of a "stack" (or a collection) of artifacts.
                        We use this here so that we always get the correct versions of artifacts.
                        Here we use the jboss-javaee-7.0-with-tools stack (you can read this as the JBoss stack of the
                        Java EE 7 APIs, with some extras tools for your project, such as Arquillian for testing) and
                        the jboss-javaee-7.0-with-hibernate stack you can read this as the JBoss stack of the Java EE
                        7 APIs, with extras from the Hibernate family of projects).

                        Define the version of JBoss' Java EE 7 APIs we want to import.
                        All dependencies from org.jboss.spec will have their version defined by this BOM.
                    -->
                    <dependency>
                        <groupId>org.wildfly.bom</groupId>
                        <artifactId>jboss-javaee-7.0-wildfly-with-tools</artifactId>
                        <version>${version.jboss.bom}</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                    <dependency>
                        <groupId>org.jboss.spec</groupId>
                        <artifactId>jboss-javaee-7.0</artifactId>
                        <version>${version.jboss.spec.javaee.7.0}</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>

                    <!--
                        All imports below are examples which should be used in individual leaf projects.
                        They all retrieve their exact versions from the jboss-javaee-7.0-with-tools bom above.

                        However, the maven-enforcer-plugin cannot extrapolate their dependencies unless explicitly
                        provided. This implies that the variables given in the jboss-javaee-7.0-1.0.0.Final.pom et. al.
                        must be provided explicitly again...

                        // Lennart, 2014-06-14
                     -->
                    <!-- Example: CDI API import -->
                    <!-- dependency>
                        <groupId>javax.enterprise</groupId>
                        <artifactId>cdi-api</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: Common Annotations API (JSR-250) import -->
                    <!-- dependency>
                        <groupId>org.jboss.spec.javax.annotation</groupId>
                        <artifactId>jboss-annotations-api_1.2_spec</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: EJB API import -->
                    <!-- dependency>
                        <groupId>org.jboss.spec.javax.ejb</groupId>
                        <artifactId>jboss-ejb-api_3.2_spec</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: JPA API import -->
                    <!-- dependency>
                        <groupId>org.hibernate.javax.persistence</groupId>
                        <artifactId>hibernate-jpa-2.1-api</artifactId>
                        <scope>provided</scope>
                    </dependency -->
                </dependencies>
            </dependencyManagement>

            <build>
                <pluginManagement>
                    <plugins>

                        <!--
                            The wildfly-maven-plugin is used to work with the wildfly application server, to perform
                            scripted operations such as remote deployment on the

                            Why:  Performs automatic operations on Wildfly AppServers
                        -->
                        <plugin>
                            <groupId>org.wildfly.plugins</groupId>
                            <artifactId>wildfly-maven-plugin</artifactId>
                            <version>${version.wildfly.maven.plugin}</version>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>wildfly9_jee7</id>
            <activation>
                <property>
                    <name>!jee.container</name>
                </property>
            </activation>

            <properties>
                <!-- Persistence properties -->
                <datasource.prefix>java:jboss/</datasource.prefix>

                <!-- Version and import-scope properties -->
                <version.jboss.bom>9.0.0.Final</version.jboss.bom>
                <version.jboss.as>9.0.0.Final</version.jboss.as>
                <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
                <version.jboss.spec.javaee.7.0>1.0.3.Final</version.jboss.spec.javaee.7.0>

                <!-- Version of Hibernate projects -->
                <version.org.hibernate>4.3.10.Final</version.org.hibernate>
                <version.org.hibernate-jpamodelgen>${version.org.hibernate}</version.org.hibernate-jpamodelgen>
                <version.org.hibernate.validator>5.1.3.Final</version.org.hibernate.validator>
                <version.org.hibernate.search>5.2.0.Final</version.org.hibernate.search>

                <!-- Some dependent version definitions -->
                <!-- version.org.hibernate.em>3.6.8.Final</version.org.hibernate.em>
                <version.org.hibernate.infinispan>3.6.8.Final</version.org.hibernate.infinispan>
                <version.org.hibernate3.commons.annotations>3.2.0.Final</version.org.hibernate3.commons.annotations -->
            </properties>

            <dependencyManagement>
                <dependencies>
                    <!--
                        JBoss distributes a complete set of Java EE 7 APIs including a Bill of Materials (BOM).
                        A BOM specifies the versions of a "stack" (or a collection) of artifacts.
                        We use this here so that we always get the correct versions of artifacts.
                        Here we use the jboss-javaee-7.0-with-tools stack (you can read this as the JBoss stack of the
                        Java EE 7 APIs, with some extras tools for your project, such as Arquillian for testing) and
                        the jboss-javaee-7.0-with-hibernate stack you can read this as the JBoss stack of the Java EE
                        7 APIs, with extras from the Hibernate family of projects).

                        Define the version of JBoss' Java EE 7 APIs we want to import.
                        All dependencies from org.jboss.spec will have their version defined by this BOM.
                    -->
                    <dependency>
                        <groupId>org.wildfly.bom</groupId>
                        <artifactId>jboss-javaee-7.0-wildfly-with-tools</artifactId>
                        <version>${version.jboss.bom}</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                    <dependency>
                        <groupId>org.jboss.spec</groupId>
                        <artifactId>jboss-javaee-7.0</artifactId>
                        <version>${version.jboss.spec.javaee.7.0}</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>

                    <!--
                        All imports below are examples which should be used in individual leaf projects.
                        They all retrieve their exact versions from the jboss-javaee-7.0-with-tools bom above.

                        However, the maven-enforcer-plugin cannot extrapolate their dependencies unless explicitly
                        provided. This implies that the variables given in the jboss-javaee-7.0-1.0.0.Final.pom et. al.
                        must be provided explicitly again...

                        // Lennart, 2014-06-14
                     -->
                    <!-- Example: CDI API import -->
                    <!-- dependency>
                        <groupId>javax.enterprise</groupId>
                        <artifactId>cdi-api</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: Common Annotations API (JSR-250) import -->
                    <!-- dependency>
                        <groupId>org.jboss.spec.javax.annotation</groupId>
                        <artifactId>jboss-annotations-api_1.2_spec</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: EJB API import -->
                    <!-- dependency>
                        <groupId>org.jboss.spec.javax.ejb</groupId>
                        <artifactId>jboss-ejb-api_3.2_spec</artifactId>
                        <scope>provided</scope>
                    </dependency -->

                    <!-- Example: JPA API import -->
                    <!-- dependency>
                        <groupId>org.hibernate.javax.persistence</groupId>
                        <artifactId>hibernate-jpa-2.1-api</artifactId>
                        <scope>provided</scope>
                    </dependency -->
                </dependencies>
            </dependencyManagement>

            <build>
                <pluginManagement>
                    <plugins>

                        <!--
                            The wildfly-maven-plugin is used to work with the wildfly application server, to perform
                            scripted operations such as remote deployment on the

                            Why:  Performs automatic operations on Wildfly AppServers
                        -->
                        <plugin>
                            <groupId>org.wildfly.plugins</groupId>
                            <artifactId>wildfly-maven-plugin</artifactId>
                            <version>${version.wildfly.maven.plugin}</version>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>mithlond-release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.apache.resources</groupId>
                                <artifactId>apache-source-release-assembly-descriptor</artifactId>
                                <version>1.0.4</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>attach-source-release-distro</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
                                    <descriptorRefs>
                                        <descriptorRef>source-release</descriptorRef>
                                    </descriptorRefs>
                                    <tarLongFileFormat>gnu</tarLongFileFormat>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <updateReleaseInfo>true</updateReleaseInfo>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-jar-no-fork</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <configuration>
                            <failOnError>false</failOnError>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
